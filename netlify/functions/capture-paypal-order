// netlify/functions/capture-paypal-order.js
const paypal = require('@paypal/checkout-server-sdk');

// Reutilizar la configuración del entorno (puedes moverla a un archivo compartido)
const environment = () => { /* ... (copiar función environment de create-paypal-order.js) ... */ };
const paypalClient = new paypal.core.PayPalHttpClient(environment());

exports.handler = async (event, context) => {
    if (event.httpMethod !== 'POST') {
        return { statusCode: 405, body: 'Method Not Allowed' };
    }

    let orderID;
    try {
        const body = JSON.parse(event.body || '{}');
        orderID = body.orderID;
        if (!orderID) {
            throw new Error("orderID no proporcionado en el cuerpo de la solicitud.");
        }
    } catch (e) {
        console.error("Error parsing request body:", e);
        return { statusCode: 400, body: JSON.stringify({ error: 'Cuerpo de solicitud inválido.' }) };
    }


    // Crear la solicitud para capturar la orden
    const request = new paypal.orders.OrdersCaptureRequest(orderID);
    request.requestBody({}); // Cuerpo vacío necesario para la captura

    try {
        const capture = await paypalClient.execute(request);
        console.log(`Captura de orden ${orderID} iniciada:`, capture.result.id);

        // Verificar si la captura fue exitosa
        const captureStatus = capture.result.status;
        if (captureStatus === 'COMPLETED') {
            console.log(`¡Pago ${orderID} completado exitosamente!`);
            // Aquí podrías guardar el ID de la transacción o marcar al usuario como pagado en una DB si tuvieras
            return {
                statusCode: 200,
                body: JSON.stringify({ success: true, status: captureStatus, captureId: capture.result.id }),
            };
        } else {
             // Otros estados podrían ser PENDING, FAILED, etc.
            console.warn(`Captura para orden ${orderID} no completada. Estado: ${captureStatus}`);
            return {
                statusCode: 400, // O un código apropiado según el estado
                body: JSON.stringify({ success: false, status: captureStatus, error: 'La captura del pago no se completó.' }),
            };
        }
    } catch (error) {
        console.error(`Error capturando orden ${orderID}:`, error.statusCode, error.message);
         let errorMessage = `Error al capturar el pago para la orden ${orderID}.`;
        if (error.message) {
             try {
                  const errorDetails = JSON.parse(error.message);
                  if (errorDetails.details && errorDetails.details.length > 0) {
                       errorMessage += ` Detalles: <span class="math-inline">\{errorDetails\.details\[0\]\.issue\} \(</span>{errorDetails.details[0].description})`;
                  }
             } catch (e) { /* Ignorar error de parseo */ }
        }
        return {
            statusCode: error.statusCode || 500,
            body: JSON.stringify({ success: false, error: errorMessage }),
        };
    }
};